{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/mnt/c/Users/Dell/games/13-game/components/Text.tsx\";\n\nimport React, { memo } from 'react';\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport { useTheme } from 'react-native-paper';\n\nvar Text = function Text(_ref) {\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'label' : _ref$type,\n      _ref$family = _ref.family,\n      family = _ref$family === void 0 ? 'regular' : _ref$family,\n      _ref$align = _ref.align,\n      align = _ref$align === void 0 ? 'left' : _ref$align,\n      _ref$textTransform = _ref.textTransform,\n      textTransform = _ref$textTransform === void 0 ? 'none' : _ref$textTransform,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'default' : _ref$variant,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, [\"type\", \"family\", \"align\", \"textTransform\", \"variant\", \"style\"]);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors,\n      fontSizes = _useTheme.fontSizes,\n      fonts = _useTheme.fonts;\n\n  var textColor = {\n    primary: colors.primary,\n    secondary: colors.textSecondary,\n    tertiary: colors.textTertiary,\n    light: colors.textLight,\n    dark: colors.textDark,\n    error: colors.error,\n    warning: colors.yellow,\n    disabled: colors.grey,\n    default: colors.textPrimary,\n    highlight: colors.highlight,\n    atention: colors.orange,\n    green: colors.green\n  };\n  var textStyle = {\n    textAlign: align,\n    color: textColor[variant],\n    fontFamily: fonts[family].fontFamily,\n    fontSize: fontSizes[type],\n    textTransform: textTransform\n  };\n  return React.createElement(NativeText, _extends({}, rest, {\n    style: [textStyle, style],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default memo(Text);","map":{"version":3,"sources":["/mnt/c/Users/Dell/games/13-game/components/Text.tsx"],"names":["React","memo","useTheme","Text","type","family","align","textTransform","variant","style","rest","colors","fontSizes","fonts","textColor","primary","secondary","textSecondary","tertiary","textTertiary","light","textLight","dark","textDark","error","warning","yellow","disabled","grey","default","textPrimary","highlight","atention","orange","green","textStyle","textAlign","color","fontFamily","fontSize"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;;AAGA,SAASC,QAAT,QAAyB,oBAAzB;;AAgCA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAQA;AAAA,uBAPXC,IAOW;AAAA,MAPXA,IAOW,0BAPJ,OAOI;AAAA,yBANXC,MAMW;AAAA,MANXA,MAMW,4BANF,SAME;AAAA,wBALXC,KAKW;AAAA,MALXA,KAKW,2BALH,MAKG;AAAA,gCAJXC,aAIW;AAAA,MAJXA,aAIW,mCAJK,MAIL;AAAA,0BAHXC,OAGW;AAAA,MAHXA,OAGW,6BAHD,SAGC;AAAA,MAFXC,KAEW,QAFXA,KAEW;AAAA,MADRC,IACQ;;AAAA,kBAC0BR,QAAQ,EADlC;AAAA,MACHS,MADG,aACHA,MADG;AAAA,MACKC,SADL,aACKA,SADL;AAAA,MACgBC,KADhB,aACgBA,KADhB;;AAGX,MAAMC,SAAS,GAAG;AAChBC,IAAAA,OAAO,EAAEJ,MAAM,CAACI,OADA;AAEhBC,IAAAA,SAAS,EAAEL,MAAM,CAACM,aAFF;AAGhBC,IAAAA,QAAQ,EAAEP,MAAM,CAACQ,YAHD;AAIhBC,IAAAA,KAAK,EAAET,MAAM,CAACU,SAJE;AAKhBC,IAAAA,IAAI,EAAEX,MAAM,CAACY,QALG;AAMhBC,IAAAA,KAAK,EAAEb,MAAM,CAACa,KANE;AAOhBC,IAAAA,OAAO,EAAEd,MAAM,CAACe,MAPA;AAQhBC,IAAAA,QAAQ,EAAEhB,MAAM,CAACiB,IARD;AAShBC,IAAAA,OAAO,EAAElB,MAAM,CAACmB,WATA;AAUhBC,IAAAA,SAAS,EAAEpB,MAAM,CAACoB,SAVF;AAWhBC,IAAAA,QAAQ,EAAErB,MAAM,CAACsB,MAXD;AAYhBC,IAAAA,KAAK,EAAEvB,MAAM,CAACuB;AAZE,GAAlB;AAeA,MAAMC,SAA+B,GAAG;AACtCC,IAAAA,SAAS,EAAE9B,KAD2B;AAEtC+B,IAAAA,KAAK,EAAEvB,SAAS,CAACN,OAAD,CAFsB;AAGtC8B,IAAAA,UAAU,EAAEzB,KAAK,CAACR,MAAD,CAAL,CAAciC,UAHY;AAItCC,IAAAA,QAAQ,EAAE3B,SAAS,CAACR,IAAD,CAJmB;AAKtCG,IAAAA,aAAa,EAAbA;AALsC,GAAxC;AAQA,SAAO,oBAAC,UAAD,eAAgBG,IAAhB;AAAsB,IAAA,KAAK,EAAE,CAACyB,SAAD,EAAY1B,KAAZ,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAnCD;;AAqCA,eAAeR,IAAI,CAACE,IAAD,CAAnB","sourcesContent":["import React, { memo } from 'react';\nimport { StyleProp, Text as NativeText, TextStyle } from 'react-native';\n\nimport { useTheme } from 'react-native-paper';\n\ntype Props = React.ComponentProps<typeof NativeText> & {\n  type:\n    | 'giga'\n    | 'mainheading'\n    | 'header'\n    | 'subheading'\n    | 'title'\n    | 'paragraph'\n    | 'label'\n    | 'caption';\n  children: React.ReactNode;\n  family?: 'bold' | 'medium' | 'regular' | 'cursive';\n  variant?:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'light'\n    | 'dark'\n    | 'error'\n    | 'warning'\n    | 'disabled'\n    | 'default'\n    | 'highlight'\n    | 'green'\n    | 'atention';\n  align?: 'left' | 'center' | 'right';\n  textTransform?: 'none' | 'uppercase';\n  style?: StyleProp<TextStyle>;\n};\n\nconst Text = ({\n  type = 'label',\n  family = 'regular',\n  align = 'left',\n  textTransform = 'none',\n  variant = 'default',\n  style,\n  ...rest\n}: Props) => {\n  const { colors, fontSizes, fonts } = useTheme();\n\n  const textColor = {\n    primary: colors.primary,\n    secondary: colors.textSecondary,\n    tertiary: colors.textTertiary,\n    light: colors.textLight,\n    dark: colors.textDark,\n    error: colors.error,\n    warning: colors.yellow,\n    disabled: colors.grey,\n    default: colors.textPrimary,\n    highlight: colors.highlight,\n    atention: colors.orange,\n    green: colors.green,\n  };\n\n  const textStyle: StyleProp<TextStyle> = {\n    textAlign: align,\n    color: textColor[variant],\n    fontFamily: fonts[family].fontFamily,\n    fontSize: fontSizes[type],\n    textTransform,\n  };\n\n  return <NativeText {...rest} style={[textStyle, style]} />;\n};\n\nexport default memo(Text);\n"]},"metadata":{},"sourceType":"module"}
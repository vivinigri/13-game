{"ast":null,"code":"export var wellness = {\n  state: {},\n  reducers: {},\n  effects: function effects(dispatch) {\n    return {};\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/Dell/games/13-game/store/models/wellness.ts"],"names":["wellness","state","reducers","effects","dispatch"],"mappings":"AAwEA,OAAO,IAAMA,QAAuB,GAAG;AACrCC,EAAAA,KAAK,EAAE,EAD8B;AAWrCC,EAAAA,QAAQ,EAAE,EAX2B;AAoErCC,EAAAA,OAAO,EAAE,iBAACC,QAAD;AAAA,WAAyB,EAAzB;AAAA;AApE4B,CAAhC","sourcesContent":["import { Dispatch } from \"..\"\r\n/* import {\r\n  GoalItem,\r\n  Activity,\r\n  Action,\r\n  WellnessProfile,\r\n  ActionsQuery,\r\n  WellnessBudget,\r\n} from \"@types\"\r\nimport {\r\n  getActivities,\r\n  getProfile,\r\n  createObjectives,\r\n  refreshActivities,\r\n  getObjectives,\r\n  updateObjectiveGoal,\r\n  getActions,\r\n  getGoalPlan,\r\n  getBudgets,\r\n} from \"@api/wellness-api\"\r\n\r\nexport type WellnessState = {\r\n  profile?: WellnessProfile\r\n  goals: GoalItem[]\r\n  activities: Activity[]\r\n  completedActivities: Activity[]\r\n  actions: Action[][]\r\n  completedActions: Action[][]\r\n  budgets: WellnessBudget[]\r\n  error: string\r\n} */\r\n\r\nexport type WellnessModel = {\r\n  state: {} ///WellnessState;\r\n  reducers: {\r\n    /* loadActivities: (\r\n      state: WellnessState,\r\n      activities: Activity[],\r\n      doneActivities: Activity[]\r\n    ) => WellnessState;\r\n    loadActions: (\r\n      state: WellnessState,\r\n      actions: Action[][],\r\n      completedActions: Action[][]\r\n    ) => WellnessState;\r\n    updateProfile: (\r\n      state: WellnessState,\r\n      profile: WellnessProfile\r\n    ) => WellnessState;\r\n    setGoal: (state: WellnessState, updatedGoal: GoalItem) => WellnessState;\r\n    setGoals: (state: WellnessState, goals: GoalItem[]) => WellnessState;\r\n    addGoal: (state: WellnessState, goal: GoalItem) => WellnessState;\r\n    setBudgets: (\r\n      state: WellnessState,\r\n      budgets: WellnessBudget[]\r\n    ) => WellnessState;\r\n    setError: (state: WellnessState, error: string) => WellnessState; */\r\n  }\r\n  effects: (\r\n    dispatch: Dispatch\r\n  ) => {\r\n    /* fetchActivities: (payload?: any, rootState?: any) => void;\r\n    fetchObjectives: (payload?: any, rootState?: any) => void;\r\n    fetchActions: (payload: ActionsQuery, rootState?: any) => void;\r\n    refreshActivities: (payload?: any, rootState?: any) => void;\r\n    loadProfile: (payload?: any, rootState?: any) => void;\r\n    sendObjectives: (payload?: any, rootState?: any) => void;\r\n    fetchBudgets: (payload?: any, rootState?: any) => void;\r\n    updateGoal: (payload?: any, rootState?: any) => void; */\r\n  }\r\n}\r\n\r\nexport const wellness: WellnessModel = {\r\n  state: {\r\n    /* profile: undefined,\r\n    goals: [],\r\n    activities: [],\r\n    completedActivities: [],\r\n    actions: [],\r\n    completedActions: [],\r\n    budgets: [],\r\n    error: '', */\r\n  },\r\n  reducers: {\r\n    /* loadActivities: (\r\n      state: WellnessState,\r\n      activities: Activity[],\r\n      completedActivities: Activity[]\r\n    ) => {\r\n      return {\r\n        ...state,\r\n        activities: activities,\r\n        completedActivities: completedActivities,\r\n      };\r\n    },\r\n    loadActions: (\r\n      state: WellnessState,\r\n      actions: Action[][],\r\n      completedActions: Action[][]\r\n    ) => {\r\n      return {\r\n        ...state,\r\n        actions,\r\n        completedActions,\r\n      };\r\n    },\r\n    updateProfile: (state: WellnessState, profile: WellnessProfile) => {\r\n      return {\r\n        ...state,\r\n        profile: profile,\r\n      };\r\n    },\r\n    setGoal: (state: WellnessState, updatedGoal: GoalItem) => ({\r\n      ...state,\r\n      goals: state.goals.map((goal: GoalItem) => {\r\n        if (goal.id === updatedGoal.id) {\r\n          return { ...updatedGoal };\r\n        }\r\n        return goal;\r\n      }),\r\n    }),\r\n    setGoals: (state: WellnessState, goals: GoalItem[]) => ({\r\n      ...state,\r\n      goals: goals,\r\n    }),\r\n    addGoal: (state: WellnessState, goal: GoalItem) => ({\r\n      ...state,\r\n      goals: [goal, ...state.goals],\r\n    }),\r\n    setBudgets: (state: WellnessState, budgets: WellnessBudget[]) => {\r\n      return {\r\n        ...state,\r\n        budgets,\r\n      };\r\n    },\r\n    setError: (state: WellnessState, error: string) => ({\r\n      ...state,\r\n      error,\r\n    }), */\r\n  },\r\n  effects: (dispatch: Dispatch) => ({\r\n    /* async fetchActivities(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const activities = getActivities(session_token);\r\n        const completedActivities = getActivities(session_token, true);\r\n        dispatch.wellness.loadActivities(\r\n          await activities,\r\n          await completedActivities\r\n        );\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async fetchObjectives(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const objectives = await getObjectives(session_token);\r\n\r\n        const actions = await getActions(session_token, {\r\n          start_year: new Date().getFullYear().toString(),\r\n          start_month: new Date().getMonth() + 1,\r\n          num_months: 3,\r\n        });\r\n\r\n        if (actions.length) {\r\n          objectives.forEach(async (objective: any) => {\r\n            const goalPlan = await getGoalPlan(session_token, objective.id);\r\n            objective.goalPlan = goalPlan;\r\n          });\r\n        }\r\n\r\n        dispatch.wellness.setGoals(objectives);\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async fetchActions(payload: ActionsQuery, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const actions = await getActions(session_token, payload);\r\n        const completedActions = await getActions(session_token, {\r\n          ...payload,\r\n          start_year: new Date().getFullYear().toString(),\r\n          start_month: new Date().getMonth() + 1,\r\n          completed: true,\r\n        });\r\n        dispatch.wellness.loadActions(actions, completedActions);\r\n        return actions;\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async fetchBudgets(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const budgets = await getBudgets(session_token);\r\n        dispatch.wellness.setBudgets(budgets);\r\n      } catch (error) {\r\n        console.log('ERROR');\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async refreshActivities(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const activities = refreshActivities(session_token);\r\n        const completedActivities = getActivities(session_token, true);\r\n        dispatch.wellness.loadActivities(\r\n          await activities,\r\n          await completedActivities\r\n        );\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async loadProfile(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const profile = getProfile(session_token);\r\n\r\n        dispatch.wellness.updateProfile(await profile);\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async sendObjectives(payload?: any, rootState?: any) {\r\n      const { profile, wellness } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const objectives = createObjectives(session_token, wellness.goals);\r\n        dispatch.wellness.setGoals(await objectives);\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async updateGoal(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { objectiveGoal, objectiveId } = payload;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const saved_goal = updateObjectiveGoal(\r\n          session_token,\r\n          objectiveId,\r\n          objectiveGoal\r\n        );\r\n        console.log('saved objective', await saved_goal);\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    }, */\r\n  }),\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getActivities, getProfile, createObjectives, refreshActivities as _refreshActivities, getObjectives, updateObjectiveGoal, getActions, getGoalPlan, getBudgets } from \"../../api/wellness-api\";\nexport var wellness = {\n  state: {\n    profile: undefined,\n    goals: [],\n    activities: [],\n    completedActivities: [],\n    actions: [],\n    completedActions: [],\n    budgets: [],\n    error: ''\n  },\n  reducers: {\n    loadActivities: function loadActivities(state, activities, completedActivities) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        activities: activities,\n        completedActivities: completedActivities\n      });\n    },\n    loadActions: function loadActions(state, actions, completedActions) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        actions: actions,\n        completedActions: completedActions\n      });\n    },\n    updateProfile: function updateProfile(state, profile) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        profile: profile\n      });\n    },\n    setGoal: function setGoal(state, updatedGoal) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        goals: state.goals.map(function (goal) {\n          if (goal.id === updatedGoal.id) {\n            return _objectSpread({}, updatedGoal);\n          }\n\n          return goal;\n        })\n      });\n    },\n    setGoals: function setGoals(state, goals) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        goals: goals\n      });\n    },\n    addGoal: function addGoal(state, goal) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        goals: [goal].concat(_toConsumableArray(state.goals))\n      });\n    },\n    setBudgets: function setBudgets(state, budgets) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        budgets: budgets\n      });\n    },\n    setError: function setError(state, error) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: error\n      });\n    }\n  },\n  effects: function effects(dispatch) {\n    return {\n      fetchActivities: function fetchActivities(payload, rootState) {\n        var profile, session_token, _activities, completedActivities;\n\n        return _regeneratorRuntime.async(function fetchActivities$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                profile = rootState.profile;\n                session_token = profile.session_token;\n                _context.prev = 2;\n                _activities = getActivities(session_token);\n                completedActivities = getActivities(session_token, true);\n                _context.t0 = dispatch.wellness;\n                _context.next = 8;\n                return _regeneratorRuntime.awrap(_activities);\n\n              case 8:\n                _context.t1 = _context.sent;\n                _context.next = 11;\n                return _regeneratorRuntime.awrap(completedActivities);\n\n              case 11:\n                _context.t2 = _context.sent;\n\n                _context.t0.loadActivities.call(_context.t0, _context.t1, _context.t2);\n\n                _context.next = 18;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t3 = _context[\"catch\"](2);\n                dispatch.wellness.setError(_context.t3.message);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[2, 15]], Promise);\n      },\n      fetchObjectives: function fetchObjectives(payload, rootState) {\n        var profile, session_token, objectives, _actions;\n\n        return _regeneratorRuntime.async(function fetchObjectives$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                profile = rootState.profile;\n                session_token = profile.session_token;\n                _context3.prev = 2;\n                _context3.next = 5;\n                return _regeneratorRuntime.awrap(getObjectives(session_token));\n\n              case 5:\n                objectives = _context3.sent;\n                _context3.next = 8;\n                return _regeneratorRuntime.awrap(getActions(session_token, {\n                  start_year: new Date().getFullYear().toString(),\n                  start_month: new Date().getMonth() + 1,\n                  num_months: 3\n                }));\n\n              case 8:\n                _actions = _context3.sent;\n\n                if (_actions.length) {\n                  objectives.forEach(function _callee(objective) {\n                    var goalPlan;\n                    return _regeneratorRuntime.async(function _callee$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return _regeneratorRuntime.awrap(getGoalPlan(session_token, objective.id));\n\n                          case 2:\n                            goalPlan = _context2.sent;\n                            objective.goalPlan = goalPlan;\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, null, null, null, Promise);\n                  });\n                }\n\n                dispatch.wellness.setGoals(objectives);\n                _context3.next = 16;\n                break;\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](2);\n                dispatch.wellness.setError(_context3.t0.message);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, [[2, 13]], Promise);\n      },\n      fetchActions: function fetchActions(payload, rootState) {\n        var profile, session_token, _actions2, _completedActions;\n\n        return _regeneratorRuntime.async(function fetchActions$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                profile = rootState.profile;\n                session_token = profile.session_token;\n                _context4.prev = 2;\n                _context4.next = 5;\n                return _regeneratorRuntime.awrap(getActions(session_token, payload));\n\n              case 5:\n                _actions2 = _context4.sent;\n                _context4.next = 8;\n                return _regeneratorRuntime.awrap(getActions(session_token, _objectSpread(_objectSpread({}, payload), {}, {\n                  start_year: new Date().getFullYear().toString(),\n                  start_month: new Date().getMonth() + 1,\n                  completed: true\n                })));\n\n              case 8:\n                _completedActions = _context4.sent;\n                dispatch.wellness.loadActions(_actions2, _completedActions);\n                return _context4.abrupt(\"return\", _actions2);\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](2);\n                dispatch.wellness.setError(_context4.t0.message);\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, [[2, 13]], Promise);\n      },\n      fetchBudgets: function fetchBudgets(payload, rootState) {\n        var profile, session_token, _budgets;\n\n        return _regeneratorRuntime.async(function fetchBudgets$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                profile = rootState.profile;\n                session_token = profile.session_token;\n                _context5.prev = 2;\n                _context5.next = 5;\n                return _regeneratorRuntime.awrap(getBudgets(session_token));\n\n              case 5:\n                _budgets = _context5.sent;\n                dispatch.wellness.setBudgets(_budgets);\n                _context5.next = 13;\n                break;\n\n              case 9:\n                _context5.prev = 9;\n                _context5.t0 = _context5[\"catch\"](2);\n                console.log('ERROR');\n                dispatch.wellness.setError(_context5.t0.message);\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, null, [[2, 9]], Promise);\n      },\n      refreshActivities: function refreshActivities(payload, rootState) {\n        var profile, session_token, _activities2, completedActivities;\n\n        return _regeneratorRuntime.async(function refreshActivities$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                profile = rootState.profile;\n                session_token = profile.session_token;\n                _context6.prev = 2;\n                _activities2 = _refreshActivities(session_token);\n                completedActivities = getActivities(session_token, true);\n                _context6.t0 = dispatch.wellness;\n                _context6.next = 8;\n                return _regeneratorRuntime.awrap(_activities2);\n\n              case 8:\n                _context6.t1 = _context6.sent;\n                _context6.next = 11;\n                return _regeneratorRuntime.awrap(completedActivities);\n\n              case 11:\n                _context6.t2 = _context6.sent;\n\n                _context6.t0.loadActivities.call(_context6.t0, _context6.t1, _context6.t2);\n\n                _context6.next = 18;\n                break;\n\n              case 15:\n                _context6.prev = 15;\n                _context6.t3 = _context6[\"catch\"](2);\n                dispatch.wellness.setError(_context6.t3.message);\n\n              case 18:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, null, [[2, 15]], Promise);\n      },\n      loadProfile: function loadProfile(payload, rootState) {\n        var profile, session_token, _profile;\n\n        return _regeneratorRuntime.async(function loadProfile$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                profile = rootState.profile;\n                session_token = profile.session_token;\n                _context7.prev = 2;\n                _profile = getProfile(session_token);\n                _context7.t0 = dispatch.wellness;\n                _context7.next = 7;\n                return _regeneratorRuntime.awrap(_profile);\n\n              case 7:\n                _context7.t1 = _context7.sent;\n\n                _context7.t0.updateProfile.call(_context7.t0, _context7.t1);\n\n                _context7.next = 14;\n                break;\n\n              case 11:\n                _context7.prev = 11;\n                _context7.t2 = _context7[\"catch\"](2);\n                dispatch.wellness.setError(_context7.t2.message);\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, null, null, [[2, 11]], Promise);\n      },\n      sendObjectives: function sendObjectives(payload, rootState) {\n        var profile, wellness, session_token, objectives;\n        return _regeneratorRuntime.async(function sendObjectives$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                profile = rootState.profile, wellness = rootState.wellness;\n                session_token = profile.session_token;\n                _context8.prev = 2;\n                objectives = createObjectives(session_token, wellness.goals);\n                _context8.t0 = dispatch.wellness;\n                _context8.next = 7;\n                return _regeneratorRuntime.awrap(objectives);\n\n              case 7:\n                _context8.t1 = _context8.sent;\n\n                _context8.t0.setGoals.call(_context8.t0, _context8.t1);\n\n                _context8.next = 14;\n                break;\n\n              case 11:\n                _context8.prev = 11;\n                _context8.t2 = _context8[\"catch\"](2);\n                dispatch.wellness.setError(_context8.t2.message);\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, null, null, [[2, 11]], Promise);\n      },\n      updateGoal: function updateGoal(payload, rootState) {\n        var profile, objectiveGoal, objectiveId, session_token, saved_goal;\n        return _regeneratorRuntime.async(function updateGoal$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                profile = rootState.profile;\n                objectiveGoal = payload.objectiveGoal, objectiveId = payload.objectiveId;\n                session_token = profile.session_token;\n                _context9.prev = 3;\n                saved_goal = updateObjectiveGoal(session_token, objectiveId, objectiveGoal);\n                _context9.t0 = console;\n                _context9.next = 8;\n                return _regeneratorRuntime.awrap(saved_goal);\n\n              case 8:\n                _context9.t1 = _context9.sent;\n\n                _context9.t0.log.call(_context9.t0, 'saved objective', _context9.t1);\n\n                _context9.next = 15;\n                break;\n\n              case 12:\n                _context9.prev = 12;\n                _context9.t2 = _context9[\"catch\"](3);\n                dispatch.wellness.setError(_context9.t2.message);\n\n              case 15:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, null, null, [[3, 12]], Promise);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/Dell/games/13-game/store/models/wellness.ts"],"names":["getActivities","getProfile","createObjectives","refreshActivities","getObjectives","updateObjectiveGoal","getActions","getGoalPlan","getBudgets","wellness","state","profile","undefined","goals","activities","completedActivities","actions","completedActions","budgets","error","reducers","loadActivities","loadActions","updateProfile","setGoal","updatedGoal","map","goal","id","setGoals","addGoal","setBudgets","setError","effects","dispatch","fetchActivities","payload","rootState","session_token","message","fetchObjectives","objectives","start_year","Date","getFullYear","toString","start_month","getMonth","num_months","length","forEach","objective","goalPlan","fetchActions","completed","fetchBudgets","console","log","loadProfile","sendObjectives","updateGoal","objectiveGoal","objectiveId","saved_goal"],"mappings":"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","sourcesContent":["import {\r\n  GoalItem,\r\n  Activity,\r\n  Action,\r\n  WellnessProfile,\r\n  ActionsQuery,\r\n  WellnessBudget,\r\n} from '@types';\r\nimport { Dispatch } from '..';\r\nimport {\r\n  getActivities,\r\n  getProfile,\r\n  createObjectives,\r\n  refreshActivities,\r\n  getObjectives,\r\n  updateObjectiveGoal,\r\n  getActions,\r\n  getGoalPlan,\r\n  getBudgets,\r\n} from '@api/wellness-api';\r\n\r\nexport type WellnessState = {\r\n  profile?: WellnessProfile;\r\n  goals: GoalItem[];\r\n  activities: Activity[];\r\n  completedActivities: Activity[];\r\n  actions: Action[][];\r\n  completedActions: Action[][];\r\n  budgets: WellnessBudget[];\r\n  error: string;\r\n};\r\n\r\nexport type WellnessModel = {\r\n  state: WellnessState;\r\n  reducers: {\r\n    loadActivities: (\r\n      state: WellnessState,\r\n      activities: Activity[],\r\n      doneActivities: Activity[]\r\n    ) => WellnessState;\r\n    loadActions: (\r\n      state: WellnessState,\r\n      actions: Action[][],\r\n      completedActions: Action[][]\r\n    ) => WellnessState;\r\n    updateProfile: (\r\n      state: WellnessState,\r\n      profile: WellnessProfile\r\n    ) => WellnessState;\r\n    setGoal: (state: WellnessState, updatedGoal: GoalItem) => WellnessState;\r\n    setGoals: (state: WellnessState, goals: GoalItem[]) => WellnessState;\r\n    addGoal: (state: WellnessState, goal: GoalItem) => WellnessState;\r\n    setBudgets: (\r\n      state: WellnessState,\r\n      budgets: WellnessBudget[]\r\n    ) => WellnessState;\r\n    setError: (state: WellnessState, error: string) => WellnessState;\r\n  };\r\n  effects: (\r\n    dispatch: Dispatch\r\n  ) => {\r\n    fetchActivities: (payload?: any, rootState?: any) => void;\r\n    fetchObjectives: (payload?: any, rootState?: any) => void;\r\n    fetchActions: (payload: ActionsQuery, rootState?: any) => void;\r\n    refreshActivities: (payload?: any, rootState?: any) => void;\r\n    loadProfile: (payload?: any, rootState?: any) => void;\r\n    sendObjectives: (payload?: any, rootState?: any) => void;\r\n    fetchBudgets: (payload?: any, rootState?: any) => void;\r\n    updateGoal: (payload?: any, rootState?: any) => void;\r\n  };\r\n};\r\n\r\nexport const wellness: WellnessModel = {\r\n  state: {\r\n    profile: undefined,\r\n    goals: [],\r\n    activities: [],\r\n    completedActivities: [],\r\n    actions: [],\r\n    completedActions: [],\r\n    budgets: [],\r\n    error: '',\r\n  },\r\n  reducers: {\r\n    loadActivities: (\r\n      state: WellnessState,\r\n      activities: Activity[],\r\n      completedActivities: Activity[]\r\n    ) => {\r\n      return {\r\n        ...state,\r\n        activities: activities,\r\n        completedActivities: completedActivities,\r\n      };\r\n    },\r\n    loadActions: (\r\n      state: WellnessState,\r\n      actions: Action[][],\r\n      completedActions: Action[][]\r\n    ) => {\r\n      return {\r\n        ...state,\r\n        actions,\r\n        completedActions,\r\n      };\r\n    },\r\n    updateProfile: (state: WellnessState, profile: WellnessProfile) => {\r\n      return {\r\n        ...state,\r\n        profile: profile,\r\n      };\r\n    },\r\n    setGoal: (state: WellnessState, updatedGoal: GoalItem) => ({\r\n      ...state,\r\n      goals: state.goals.map((goal: GoalItem) => {\r\n        if (goal.id === updatedGoal.id) {\r\n          return { ...updatedGoal };\r\n        }\r\n        return goal;\r\n      }),\r\n    }),\r\n    setGoals: (state: WellnessState, goals: GoalItem[]) => ({\r\n      ...state,\r\n      goals: goals,\r\n    }),\r\n    addGoal: (state: WellnessState, goal: GoalItem) => ({\r\n      ...state,\r\n      goals: [goal, ...state.goals],\r\n    }),\r\n    setBudgets: (state: WellnessState, budgets: WellnessBudget[]) => {\r\n      return {\r\n        ...state,\r\n        budgets,\r\n      };\r\n    },\r\n    setError: (state: WellnessState, error: string) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  effects: (dispatch: Dispatch) => ({\r\n    async fetchActivities(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const activities = getActivities(session_token);\r\n        const completedActivities = getActivities(session_token, true);\r\n        dispatch.wellness.loadActivities(\r\n          await activities,\r\n          await completedActivities\r\n        );\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async fetchObjectives(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const objectives = await getObjectives(session_token);\r\n\r\n        const actions = await getActions(session_token, {\r\n          start_year: new Date().getFullYear().toString(),\r\n          start_month: new Date().getMonth() + 1,\r\n          num_months: 3,\r\n        });\r\n\r\n        if (actions.length) {\r\n          objectives.forEach(async (objective: any) => {\r\n            const goalPlan = await getGoalPlan(session_token, objective.id);\r\n            objective.goalPlan = goalPlan;\r\n          });\r\n        }\r\n\r\n        dispatch.wellness.setGoals(objectives);\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async fetchActions(payload: ActionsQuery, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const actions = await getActions(session_token, payload);\r\n        const completedActions = await getActions(session_token, {\r\n          ...payload,\r\n          start_year: new Date().getFullYear().toString(),\r\n          start_month: new Date().getMonth() + 1,\r\n          completed: true,\r\n        });\r\n        dispatch.wellness.loadActions(actions, completedActions);\r\n        return actions;\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async fetchBudgets(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const budgets = await getBudgets(session_token);\r\n        dispatch.wellness.setBudgets(budgets);\r\n      } catch (error) {\r\n        console.log('ERROR');\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async refreshActivities(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const activities = refreshActivities(session_token);\r\n        const completedActivities = getActivities(session_token, true);\r\n        dispatch.wellness.loadActivities(\r\n          await activities,\r\n          await completedActivities\r\n        );\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async loadProfile(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const profile = getProfile(session_token);\r\n\r\n        dispatch.wellness.updateProfile(await profile);\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async sendObjectives(payload?: any, rootState?: any) {\r\n      const { profile, wellness } = rootState;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const objectives = createObjectives(session_token, wellness.goals);\r\n        dispatch.wellness.setGoals(await objectives);\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n    async updateGoal(payload?: any, rootState?: any) {\r\n      const { profile } = rootState;\r\n      const { objectiveGoal, objectiveId } = payload;\r\n      const { session_token } = profile;\r\n\r\n      try {\r\n        const saved_goal = updateObjectiveGoal(\r\n          session_token,\r\n          objectiveId,\r\n          objectiveGoal\r\n        );\r\n        console.log('saved objective', await saved_goal);\r\n      } catch (error) {\r\n        dispatch.wellness.setError(error.message);\r\n      }\r\n    },\r\n  }),\r\n};\r\n"]},"metadata":{},"sourceType":"module"}